generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PersonalInfo {
  id            Int             @id @default(autoincrement())
  firstName     String
  lastName      String
  phone         String
  address       String
  dateOfBirth   DateTime
  joinDate      DateTime
  department    String
  bankDetails   BankDetails?
  salaryDetails SalaryDetails?
  paymentDetails PaymentDetails[]
}

model BankDetails {
  id                Int          @id @default(autoincrement())
  bankAccountNumber String
  bankName          String
  branchCode        String
  employee          PersonalInfo @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId        Int          @unique
}

model SalaryDetails {
  id                  Int          @id @default(autoincrement())
  basicSalary         Float
  overtimePay         Float
  transportationCosts Float
  familyAllowance     Float
  attendanceAllowance Float
  leaveAllowance      Float
  specialAllowance    Float
  employee            PersonalInfo @relation(fields: [employeeId], references: [id])
  employeeId          Int          @unique
}

model PaymentDetails {
  id             Int             @id @default(autoincrement())
  employee       PersonalInfo    @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId     Int
  month          Int
  year           Int
  createdAt      DateTime        @default(now())
  workDetails    WorkDetails?
  earnings       Earnings?
  deductions     Deductions?
}

model WorkDetails {
  id                       Int          @id @default(autoincrement())
  paymentDetails           PaymentDetails @relation(fields: [paymentDetailsId], references: [id], onDelete: Cascade)
  paymentDetailsId         Int          @unique
  scheduledWorkingDays     Int
  numberOfWorkingDays      Int
  numberOfPaidHolidays     Int
  remainingPaidVacationDays Int
  overtime                 Float
  timeLate                 Float
  timeLeavingEarly         Float
}

model Earnings {
  id                      Int          @id @default(autoincrement())
  paymentDetails           PaymentDetails @relation(fields: [paymentDetailsId], references: [id], onDelete: Cascade)
  paymentDetailsId         Int          @unique
  basicSalary             Float
  overtimePay             Float
  transportationCosts     Float
  attendanceAllowance     Float
  familyAllowance         Float
  leaveAllowance          Float
  specialAllowance        Float
}

model Deductions {
  id                      Int          @id @default(autoincrement())
  paymentDetails           PaymentDetails @relation(fields: [paymentDetailsId], references: [id], onDelete: Cascade)
  paymentDetailsId         Int          @unique
  healthInsurance         Float
  employeePensionInsurance Float
  employmentInsurance     Float
  longTermCareInsurance   Float
  socialInsurance         Float
  incomeTax               Float
  residentTax             Float
  advancePayment          Float
  yearEndAdjustment       Float
}